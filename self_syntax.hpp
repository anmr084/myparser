// generated by MyParser C++ Code Generator

#ifndef SELF_SYNTAX_HPP
#define SELF_SYNTAX_HPP

#include "./myparser.hpp"

namespace myparser {

template<>
class RuleDef<MP_STR("root", 4)>:
public RuleList<MP_STR("root", 4),
    RuleLine<
        RuleItemSpace<>,
        RuleItemRef<MP_STR("blocks", 6)>,
        RuleItemSpace<>
    >
> {};

template<>
class RuleDef<MP_STR("space", 5)>:
public RuleList<MP_STR("space", 5),
    RuleLine<
        RuleItemRef<MP_STR("comment line", 12), TagAny0>
    >
> {};

template<>
class RuleDef<MP_STR("keyword", 7)>:
public RuleList<MP_STR("keyword", 7),
    RuleLine<
        RuleItemRef<MP_STR("id", 2)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("sign", 4)>
    >
> {};

template<>
class RuleDef<MP_STR("blocks", 6)>:
public RuleList<MP_STR("blocks", 6),
    RuleLine<
        RuleItemRef<MP_STR("block", 5), TagAny1>
    >
> {};

template<>
class RuleDef<MP_STR("block", 5)>:
public RuleList<MP_STR("block", 5),
    RuleLine<
        RuleItemRef<MP_STR("list head", 9)>,
        RuleItemSpace<>,
        RuleItemRef<MP_STR("list body", 9)>,
        RuleItemSpace<>
    >,
    RuleLine<
        RuleItemRef<MP_STR("builtin head", 12)>,
        RuleItemSpace<>,
        RuleItemRef<MP_STR("list body", 9)>,
        RuleItemSpace<>
    >,
    RuleLine<
        RuleItemRef<MP_STR("regex head", 10)>,
        RuleItemSpace<>,
        RuleItemRef<MP_STR("regex line", 10)>,
        RuleItemSpace<>
    >
> {};

template<>
class RuleDef<MP_STR("list head", 9)>:
public RuleList<MP_STR("list head", 9),
    RuleLine<
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR(":", 1)>,
        RuleItemRef<MP_STR("line break", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("builtin head", 12)>:
public RuleList<MP_STR("builtin head", 12),
    RuleLine<
        RuleItemKeyword<MP_STR("**", 2)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR("**:", 3)>,
        RuleItemRef<MP_STR("line break", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("regex head", 10)>:
public RuleList<MP_STR("regex head", 10),
    RuleLine<
        RuleItemKeyword<MP_STR("*", 1)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR("*:", 2)>,
        RuleItemRef<MP_STR("line break", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("list body", 9)>:
public RuleList<MP_STR("list body", 9),
    RuleLine<
        RuleItemRef<MP_STR("list line", 9)>,
        RuleItemSpace<>,
        RuleItemRef<MP_STR("list body", 9)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("list line", 9)>
    >
> {};

template<>
class RuleDef<MP_STR("list line", 9)>:
public RuleList<MP_STR("list line", 9),
    RuleLine<
        RuleItemRef<MP_STR("indent", 6)>,
        RuleItemRef<MP_STR("list items", 10)>,
        RuleItemRef<MP_STR("line break", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("regex line", 10)>:
public RuleList<MP_STR("regex line", 10),
    RuleLine<
        RuleItemRef<MP_STR("indent", 6)>,
        RuleItemRef<MP_STR("anything", 8)>,
        RuleItemRef<MP_STR("line break", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("comment line", 12)>:
public RuleList<MP_STR("comment line", 12),
    RuleLine<
        RuleItemRef<MP_STR("indent", 6)>,
        RuleItemKeyword<MP_STR("//", 2)>,
        RuleItemRef<MP_STR("anything", 8)>,
        RuleItemRef<MP_STR("line break", 10)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("other markdown", 14)>,
        RuleItemRef<MP_STR("line break", 10)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("line break", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("list items", 10)>:
public RuleList<MP_STR("list items", 10),
    RuleLine<
        RuleItemRef<MP_STR("list item", 9), TagAny0>
    >
> {};

template<>
class RuleDef<MP_STR("list item", 9)>:
public RuleList<MP_STR("list item", 9),
    RuleLine<
        RuleItemKeyword<MP_STR(" ", 1)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("empty item", 10)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("keyword item", 12)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("ref item", 8)>
    >,
    RuleLine<
        RuleItemRef<MP_STR("error item", 10)>
    >
> {};

template<>
class RuleDef<MP_STR("empty item", 10)>:
public RuleList<MP_STR("empty item", 10),
    RuleLine<
        RuleItemKeyword<MP_STR("<", 1)>,
        RuleItemKeyword<MP_STR(">", 1)>
    >
> {};

template<>
class RuleDef<MP_STR("keyword item", 12)>:
public RuleRegex<MP_STR("keyword item", 12),
    MP_STR("([^ \\r\\n\\\\<]|\\\\.)+", 18)
> {};

template<>
class RuleDef<MP_STR("ref item", 8)>:
public RuleList<MP_STR("ref item", 8),
    RuleLine<
        RuleItemKeyword<MP_STR("<", 1)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR(">", 1)>
    >,
    RuleLine<
        RuleItemKeyword<MP_STR("<?", 2)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR(">", 1)>
    >,
    RuleLine<
        RuleItemKeyword<MP_STR("<*", 2)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR(">", 1)>
    >,
    RuleLine<
        RuleItemKeyword<MP_STR("<+", 2)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR(">", 1)>
    >
> {};

template<>
class RuleDef<MP_STR("error item", 10)>:
public RuleList<MP_STR("error item", 10),
    RuleLine<
        RuleItemKeyword<MP_STR("<!", 2)>,
        RuleItemRef<MP_STR("id", 2)>,
        RuleItemKeyword<MP_STR(">", 1)>
    >
> {};

template<>
class RuleDef<MP_STR("id", 2)>:
public RuleRegex<MP_STR("id", 2),
    MP_STR("\\w([\\w ]*\\w)?", 13)
> {};

template<>
class RuleDef<MP_STR("sign", 4)>:
public RuleRegex<MP_STR("sign", 4),
    MP_STR("\\**:|\\*+| +|\\/\\/|<[\\*\\+\\?\\!]?|>", 31)
> {};

template<>
class RuleDef<MP_STR("other markdown", 14)>:
public RuleRegex<MP_STR("other markdown", 14),
    MP_STR("( ? ? ?)[^ \\r\\n].*[^:\\r\\n]|.|", 29)
> {};

template<>
class RuleDef<MP_STR("indent", 6)>:
public RuleRegex<MP_STR("indent", 6),
    MP_STR("(    )", 6)
> {};

template<>
class RuleDef<MP_STR("line break", 10)>:
public RuleRegex<MP_STR("line break", 10),
    MP_STR("[\\r\\n]+", 7)
> {};

template<>
class RuleDef<MP_STR("anything", 8)>:
public RuleRegex<MP_STR("anything", 8),
    MP_STR(".*", 2)
> {};


}

#endif
