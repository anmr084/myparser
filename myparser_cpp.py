import os

from myparser_tool import char_maybe, char_any0, char_any1


def str_gen(value):
    result = value.encode('string_escape').replace('"', r'\"')

    return 'MP_STR("' + result + '", ' + str(len(value)) + ')'


indent0 = os.linesep
indent1 = indent0 + '    '
indent1c = ',' + indent1
indent2 = indent1 + '    '
indent2c = ',' + indent2

cplusplus_dump = {
    'space': lambda: 'RuleItemSpace<>',
    'keyword': lambda x: 'RuleItemKeyword<' + str_gen(x) + '>',
    'ref': lambda x: 'RuleItemRef<' + str_gen(x) + '>',
    'ref' + char_maybe: lambda x: 'RuleItemRef<' + str_gen(x) + ', TagMaybe>',
    'ref' + char_any0: lambda x: 'RuleItemRef<' + str_gen(x) + ', TagAny0>',
    'ref' + char_any1: lambda x: 'RuleItemRef<' + str_gen(x) + ', TagAny1>',
    'error': lambda x: 'RuleItemError<' + str_gen(x) + '>',
    'line': lambda l: (
        'RuleLine<' + indent2 + indent2c.join(l) + indent1 + '>'
    ),

    'list': lambda n, l: (
        'template<>' + indent0
        + 'class RuleDef<' + str_gen(n) + '>:' + indent0
        + 'public RuleList<' + str_gen(n)
        + indent1c + indent1c.join(l) + indent0
        + '> {};' + indent0
    ),
    'regex': lambda n, x: (
        'template<>' + indent0
        + 'class RuleDef<' + str_gen(n) + '>:' + indent0
        + 'public RuleRegex<' + str_gen(n)
        + indent1c + str_gen(x) + indent0
        + '> {};' + indent0
    )
}


def cplusplus_gen(namespace, content, mppath, guard):
    return (
        '''// generated by MyParser C++ Code Generator

#ifndef ''' + guard + '''
#define ''' + guard + '''

#include "''' + mppath + '''myparser_rule.hpp"

namespace ''' + namespace + ''' {

using namespace myparser;

// need specialization
template <class N>
class RuleDef: public RuleNamed<N> {
public:
    static const Node *parse(Input &input, const Input &end) {
        (void) input;
        (void) end;

        return N::need_specialization();
    }
};

template <class N, class... RL>
using RuleList = RuleList<RuleDef, N, RL...>;

template <class N, class... RL>
using RuleBuiltin = RuleBuiltin<RuleDef, N, RL...>;

template <class N, class RX>
using RuleRegex = RuleRegex<RuleDef, N, RX>;

template <class TAG = TagNormal>
using RuleItemSpace = RuleItemSpace<RuleDef, TAG>;

template <class KW, class TAG = TagNormal>
using RuleItemKeyword = RuleItemKeyword<RuleDef, KW, TAG>;

template <class N, class TAG = TagNormal>
using RuleItemRef = RuleItemRef<RuleDef, N, TAG>;

template <class E, class TAG = TagNormal>
using RuleItemError = RuleItemError<RuleDef, E, TAG>;

''' + content + '''

}

#endif
'''
    )
